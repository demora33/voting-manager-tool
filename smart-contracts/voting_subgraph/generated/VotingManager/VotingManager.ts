// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteCasted extends ethereum.Event {
  get params(): VoteCasted__Params {
    return new VoteCasted__Params(this);
  }
}

export class VoteCasted__Params {
  _event: VoteCasted;

  constructor(event: VoteCasted) {
    this._event = event;
  }

  get votingProposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voteOption(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get voteCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VotingConcluded extends ethereum.Event {
  get params(): VotingConcluded__Params {
    return new VotingConcluded__Params(this);
  }
}

export class VotingConcluded__Params {
  _event: VotingConcluded;

  constructor(event: VotingConcluded) {
    this._event = event;
  }

  get votingProposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get yesVotes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get noVotes(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VotingProposalCreated extends ethereum.Event {
  get params(): VotingProposalCreated__Params {
    return new VotingProposalCreated__Params(this);
  }
}

export class VotingProposalCreated__Params {
  _event: VotingProposalCreated;

  constructor(event: VotingProposalCreated) {
    this._event = event;
  }

  get votingProposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proposalHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get creationDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get conclusionDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VotingManager__getProposalResultValue0Struct extends ethereum.Tuple {
  get votingProposalId(): BigInt {
    return this[0].toBigInt();
  }

  get totalVotes(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get proposalHash(): Bytes {
    return this[3].toBytes();
  }

  get creationDate(): BigInt {
    return this[4].toBigInt();
  }

  get conclusionDate(): BigInt {
    return this[5].toBigInt();
  }

  get concluded(): boolean {
    return this[6].toBoolean();
  }
}

export class VotingManager__getVotesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class VotingManager__votingProposalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Bytes;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Bytes,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getVotingProposalId(): BigInt {
    return this.value0;
  }

  getTotalVotes(): BigInt {
    return this.value1;
  }

  getCreator(): Address {
    return this.value2;
  }

  getProposalHash(): Bytes {
    return this.value3;
  }

  getCreationDate(): BigInt {
    return this.value4;
  }

  getConclusionDate(): BigInt {
    return this.value5;
  }

  getConcluded(): boolean {
    return this.value6;
  }
}

export class VotingManager extends ethereum.SmartContract {
  static bind(address: Address): VotingManager {
    return new VotingManager("VotingManager", address);
  }

  getProposal(id: BigInt): VotingManager__getProposalResultValue0Struct {
    let result = super.call(
      "getProposal",
      "getProposal(uint256):((uint256,uint256,address,bytes32,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return changetype<VotingManager__getProposalResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getProposal(
    id: BigInt,
  ): ethereum.CallResult<VotingManager__getProposalResultValue0Struct> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(uint256):((uint256,uint256,address,bytes32,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VotingManager__getProposalResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getVotes(id: BigInt): VotingManager__getVotesResult {
    let result = super.call("getVotes", "getVotes(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return new VotingManager__getVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getVotes(id: BigInt): ethereum.CallResult<VotingManager__getVotesResult> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingManager__getVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  hasVoted(param0: BigInt, param1: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(param0: BigInt, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextVotingProposalId(): BigInt {
    let result = super.call(
      "nextVotingProposalId",
      "nextVotingProposalId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_nextVotingProposalId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextVotingProposalId",
      "nextVotingProposalId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voteCounts(param0: BigInt, param1: i32): BigInt {
    let result = super.call(
      "voteCounts",
      "voteCounts(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
      ],
    );

    return result[0].toBigInt();
  }

  try_voteCounts(param0: BigInt, param1: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voteCounts",
      "voteCounts(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingProposals(param0: BigInt): VotingManager__votingProposalsResult {
    let result = super.call(
      "votingProposals",
      "votingProposals(uint256):(uint256,uint256,address,bytes32,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new VotingManager__votingProposalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
    );
  }

  try_votingProposals(
    param0: BigInt,
  ): ethereum.CallResult<VotingManager__votingProposalsResult> {
    let result = super.tryCall(
      "votingProposals",
      "votingProposals(uint256):(uint256,uint256,address,bytes32,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingManager__votingProposalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get votingProposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voteOption(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class ConcludeVotingCall extends ethereum.Call {
  get inputs(): ConcludeVotingCall__Inputs {
    return new ConcludeVotingCall__Inputs(this);
  }

  get outputs(): ConcludeVotingCall__Outputs {
    return new ConcludeVotingCall__Outputs(this);
  }
}

export class ConcludeVotingCall__Inputs {
  _call: ConcludeVotingCall;

  constructor(call: ConcludeVotingCall) {
    this._call = call;
  }

  get votingProposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConcludeVotingCall__Outputs {
  _call: ConcludeVotingCall;

  constructor(call: ConcludeVotingCall) {
    this._call = call;
  }
}

export class CreateVotingProposalCall extends ethereum.Call {
  get inputs(): CreateVotingProposalCall__Inputs {
    return new CreateVotingProposalCall__Inputs(this);
  }

  get outputs(): CreateVotingProposalCall__Outputs {
    return new CreateVotingProposalCall__Outputs(this);
  }
}

export class CreateVotingProposalCall__Inputs {
  _call: CreateVotingProposalCall;

  constructor(call: CreateVotingProposalCall) {
    this._call = call;
  }

  get proposalHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get endDate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateVotingProposalCall__Outputs {
  _call: CreateVotingProposalCall;

  constructor(call: CreateVotingProposalCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
